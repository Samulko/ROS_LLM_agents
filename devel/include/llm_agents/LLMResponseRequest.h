// Generated by gencpp from file llm_agents/LLMResponseRequest.msg
// DO NOT EDIT!


#ifndef LLM_AGENTS_MESSAGE_LLMRESPONSEREQUEST_H
#define LLM_AGENTS_MESSAGE_LLMRESPONSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace llm_agents
{
template <class ContainerAllocator>
struct LLMResponseRequest_
{
  typedef LLMResponseRequest_<ContainerAllocator> Type;

  LLMResponseRequest_()
    : query()
    , agent_id()  {
    }
  LLMResponseRequest_(const ContainerAllocator& _alloc)
    : query(_alloc)
    , agent_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _query_type;
  _query_type query;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _agent_id_type;
  _agent_id_type agent_id;





  typedef boost::shared_ptr< ::llm_agents::LLMResponseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::llm_agents::LLMResponseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LLMResponseRequest_

typedef ::llm_agents::LLMResponseRequest_<std::allocator<void> > LLMResponseRequest;

typedef boost::shared_ptr< ::llm_agents::LLMResponseRequest > LLMResponseRequestPtr;
typedef boost::shared_ptr< ::llm_agents::LLMResponseRequest const> LLMResponseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::llm_agents::LLMResponseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::llm_agents::LLMResponseRequest_<ContainerAllocator1> & lhs, const ::llm_agents::LLMResponseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.query == rhs.query &&
    lhs.agent_id == rhs.agent_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::llm_agents::LLMResponseRequest_<ContainerAllocator1> & lhs, const ::llm_agents::LLMResponseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace llm_agents

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::llm_agents::LLMResponseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::llm_agents::LLMResponseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::llm_agents::LLMResponseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1692929dc490ff37a7139bda085c4e52";
  }

  static const char* value(const ::llm_agents::LLMResponseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1692929dc490ff37ULL;
  static const uint64_t static_value2 = 0xa7139bda085c4e52ULL;
};

template<class ContainerAllocator>
struct DataType< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "llm_agents/LLMResponseRequest";
  }

  static const char* value(const ::llm_agents::LLMResponseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string query\n"
"string agent_id\n"
;
  }

  static const char* value(const ::llm_agents::LLMResponseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.query);
      stream.next(m.agent_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LLMResponseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::llm_agents::LLMResponseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::llm_agents::LLMResponseRequest_<ContainerAllocator>& v)
  {
    s << indent << "query: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.query);
    s << indent << "agent_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.agent_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LLM_AGENTS_MESSAGE_LLMRESPONSEREQUEST_H
